[tox]
min_version = 4.0
env_list =
    py310
    py311
    py312
    py313
    lint
    type-check
    integration

[testenv]
description = Run unit tests with pytest
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.0
    pytest-cov>=4.0
    pytest-xdist>=3.0
    requests>=2.28
    backoff>=2.2
    defusedxml>=0.7
    typing-extensions>=4.0
commands =
    pytest {posargs:tests/utils/ tests/parser/unit/ tests/base/} -v

[testenv:py310]
description = Test with Python 3.10 (minimum supported)
basepython = python3.10

[testenv:py311]
description = Test with Python 3.11 (compatibility)
basepython = python3.11

[testenv:py312]
description = Test with Python 3.12 (recommended)
basepython = python3.12

[testenv:py313]
description = Test with Python 3.13 (future support)
basepython = python3.13

[testenv:lint]
description = Run linting with ruff
basepython = python3.12
deps =
    ruff>=0.1.0
commands =
    ruff check .
    ruff format --check .

[testenv:type-check]
description = Run type checking with mypy
basepython = python3.12
deps =
    mypy>=1.0
    types-requests
    types-setuptools
commands = mypy src/

[testenv:integration]
description = Run integration tests (requires network)
basepython = python3.12
deps =
    {[testenv]deps}
    pytest-timeout>=2.0
commands =
    pytest tests/search/functional/ -v --timeout=30 {posargs}

[testenv:full]
description = Run complete test suite with coverage
basepython = python3.12
deps =
    {[testenv]deps}
    coverage[toml]>=7.0
commands =
    coverage run -m pytest tests/ -v
    coverage report --show-missing
    coverage html

[testenv:benchmark]
description = Run performance benchmarks
basepython = python3.12
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0
commands =
    pytest tests/ -k benchmark --benchmark-only {posargs}

[testenv:clean]
description = Clean build artifacts and cache
deps =
skip_install = true
commands =
    python -c "
    import shutil, pathlib
    for pattern in ['build', 'dist', '*.egg-info', '.coverage', 'htmlcov', '.pytest_cache', '.mypy_cache', '__pycache__']:
        for path in pathlib.Path('.').rglob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
            elif path.is_file():
                path.unlink()
    print('âœ… Cleaned build artifacts and cache')
    "

[gh-actions]
# Map GitHub Actions Python versions to tox environments
python =
    3.10: py310
    3.11: py311
    3.12: py312, lint, type-check, full
    3.13: py313
